// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/surveyor/dish/marshallers.go

// Package mock_surveyor_dish is a generated GoMock package.
package mock_surveyor_dish

import (
	reflect "reflect"

	dish "github.com/allergeye/surveyor-service/internal/domain/dish"
	surveyor_dish "github.com/allergeye/surveyor-service/pkg/surveyor/dish"
	gomock "go.uber.org/mock/gomock"
)

// MockMarshallers is a mock of Marshallers interface.
type MockMarshallers struct {
	ctrl     *gomock.Controller
	recorder *MockMarshallersMockRecorder
}

// MockMarshallersMockRecorder is the mock recorder for MockMarshallers.
type MockMarshallersMockRecorder struct {
	mock *MockMarshallers
}

// NewMockMarshallers creates a new mock instance.
func NewMockMarshallers(ctrl *gomock.Controller) *MockMarshallers {
	mock := &MockMarshallers{ctrl: ctrl}
	mock.recorder = &MockMarshallersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMarshallers) EXPECT() *MockMarshallersMockRecorder {
	return m.recorder
}

// MarshalAddDishesToRestaurantDishesAllergensRequestBody mocks base method.
func (m *MockMarshallers) MarshalAddDishesToRestaurantDishesAllergensRequestBody(addDishesToRestaurantDishesAllergensRequestBody []surveyor_dish.AddDishesToRestaurantDishesAllergensRequestBody) ([]dish.Allergen, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalAddDishesToRestaurantDishesAllergensRequestBody", addDishesToRestaurantDishesAllergensRequestBody)
	ret0, _ := ret[0].([]dish.Allergen)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalAddDishesToRestaurantDishesAllergensRequestBody indicates an expected call of MarshalAddDishesToRestaurantDishesAllergensRequestBody.
func (mr *MockMarshallersMockRecorder) MarshalAddDishesToRestaurantDishesAllergensRequestBody(addDishesToRestaurantDishesAllergensRequestBody interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalAddDishesToRestaurantDishesAllergensRequestBody", reflect.TypeOf((*MockMarshallers)(nil).MarshalAddDishesToRestaurantDishesAllergensRequestBody), addDishesToRestaurantDishesAllergensRequestBody)
}

// MarshalAddDishesToRestaurantDishesRequestBody mocks base method.
func (m *MockMarshallers) MarshalAddDishesToRestaurantDishesRequestBody(addDishesToRestaurantDishesRequestBody []surveyor_dish.AddDishesToRestaurantDishesRequestBody) ([]dish.Dish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalAddDishesToRestaurantDishesRequestBody", addDishesToRestaurantDishesRequestBody)
	ret0, _ := ret[0].([]dish.Dish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalAddDishesToRestaurantDishesRequestBody indicates an expected call of MarshalAddDishesToRestaurantDishesRequestBody.
func (mr *MockMarshallersMockRecorder) MarshalAddDishesToRestaurantDishesRequestBody(addDishesToRestaurantDishesRequestBody interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalAddDishesToRestaurantDishesRequestBody", reflect.TypeOf((*MockMarshallers)(nil).MarshalAddDishesToRestaurantDishesRequestBody), addDishesToRestaurantDishesRequestBody)
}

// MarshalAddDishesToRestaurantRequestBody mocks base method.
func (m *MockMarshallers) MarshalAddDishesToRestaurantRequestBody(addDishesToRestaurantRequestBody surveyor_dish.AddDishesToRestaurantRequestBody) (string, []dish.Dish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalAddDishesToRestaurantRequestBody", addDishesToRestaurantRequestBody)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]dish.Dish)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MarshalAddDishesToRestaurantRequestBody indicates an expected call of MarshalAddDishesToRestaurantRequestBody.
func (mr *MockMarshallersMockRecorder) MarshalAddDishesToRestaurantRequestBody(addDishesToRestaurantRequestBody interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalAddDishesToRestaurantRequestBody", reflect.TypeOf((*MockMarshallers)(nil).MarshalAddDishesToRestaurantRequestBody), addDishesToRestaurantRequestBody)
}
