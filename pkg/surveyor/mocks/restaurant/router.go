// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/surveyor/restaurant/router.go

// Package mock_surveyor_restaurant is a generated GoMock package.
package mock_surveyor_restaurant

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockRestaurantRouter is a mock of RestaurantRouter interface.
type MockRestaurantRouter struct {
	ctrl     *gomock.Controller
	recorder *MockRestaurantRouterMockRecorder
}

// MockRestaurantRouterMockRecorder is the mock recorder for MockRestaurantRouter.
type MockRestaurantRouterMockRecorder struct {
	mock *MockRestaurantRouter
}

// NewMockRestaurantRouter creates a new mock instance.
func NewMockRestaurantRouter(ctrl *gomock.Controller) *MockRestaurantRouter {
	mock := &MockRestaurantRouter{ctrl: ctrl}
	mock.recorder = &MockRestaurantRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestaurantRouter) EXPECT() *MockRestaurantRouterMockRecorder {
	return m.recorder
}

// AddRestaurant mocks base method.
func (m *MockRestaurantRouter) AddRestaurant(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddRestaurant", c)
}

// AddRestaurant indicates an expected call of AddRestaurant.
func (mr *MockRestaurantRouterMockRecorder) AddRestaurant(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRestaurant", reflect.TypeOf((*MockRestaurantRouter)(nil).AddRestaurant), c)
}

// GetAllRestaurants mocks base method.
func (m *MockRestaurantRouter) GetAllRestaurants(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetAllRestaurants", c)
}

// GetAllRestaurants indicates an expected call of GetAllRestaurants.
func (mr *MockRestaurantRouterMockRecorder) GetAllRestaurants(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRestaurants", reflect.TypeOf((*MockRestaurantRouter)(nil).GetAllRestaurants), c)
}
